{"version":3,"sources":["ng://ng-numeric-keyboard/lib/utils/keys.ts","ng://ng-numeric-keyboard/lib/utils/layouts.ts","ng://ng-numeric-keyboard/lib/keyboard/keyboard.component.ts","ng://ng-numeric-keyboard/lib/input/input.component.ts","ng://ng-numeric-keyboard/lib/utils/utils.ts","ng://ng-numeric-keyboard/lib/numeric-input.module.ts","ng://ng-numeric-keyboard/lib/ng-numeric-keyboard.module.ts"],"names":["Layouts","number","key","rowspan","tel","phone","KeyboardOptions","NumericKeyboardComponent","this","layout","entertext","press","EventEmitter","enterpress","ENTER","DEL","ESC","prototype","ngOnInit","options","init","dispatch","event","payload","emit","onTouchend","resolvedLayout","Array","isArray","Error","every","i","kp","ks","Component","args","selector","template","Input","Output","activeInput","requestAnimationFrame","window","setTimeout","animate","iterable","done","frames","running","frame","closure","timestamp","coerceBooleanProperty","value","RNumber","RTel","KeyboardCenter","register","input","unregister","document","addEventListener","e","inputElement","contains","target","keyboardElement","closeKeyboard","removeEventListener","Options","type","autofocus","disabled","readonly","maxlength","name","placeholder","format","NumericInputComponent","element","appRef","componentFactoryResolver","injector","_autofocus","_disabled","_readonly","_value","activeColor","isFocus","focus","blur","ngModelChange","_onChange","_","Object","defineProperty","rawValue","toString","split","cursorPos","length","set","resolvedOptions","ngOnDestroy","ngAfterViewInit","onMounted","nativeElement","querySelector","ngAfterViewChecked","onUpdated","trackByIndex","index","writeValue","undefined","registerOnChange","fn","registerOnTouched","onFocus","stopPropagation","openKeyboard","dataset","isNaN","createKeyboard","el","events","callback","componentRef","resolveComponentFactory","create","event_1","assign","instance","subscribe","attachView","hostView","appendChild","rootNodes","destroyKeyboard","keyboard","destroy","detachView","rformat","formatFn","RegExp","val","test","cursorColor","cursorActive","_this","moveCursor","_a","_b","inputKey","isAdd","newRawValue","slice","splice","newValue","join","parseFloat","elCursor","elText","elCharactor","style","transform","cursorOffset","offsetLeft","offsetWidth","maxVisibleWidth","parentNode","Math","min","elContainer","createElement","elShadow","elKeyboard","className","body","bind","position","bottom","left","removeChild","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","ApplicationRef","ComponentFactoryResolver","Injector","NumericInputModule","NgModule","exports","declarations","entryComponents","imports","CommonModule","FormsModule","NgNumericKeyboardModule"],"mappings":"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","sourcesContent":["export const ZERO  = '0';\nexport const ONE   = '1';\nexport const TWO   = '2';\nexport const THREE = '3';\nexport const FOUR  = '4';\nexport const FIVE  = '5';\nexport const SIX   = '6';\nexport const SEVEN = '7';\nexport const EIGHT = '8';\nexport const NINE  = '9';\nexport const DOT   = '.';\nexport const DEL   = 'del';\nexport const ENTER = 'enter';\nexport const ESC   = 'esc';\nexport const BLANK = '';\n","import * as Keys from './keys';\n\nconst NumberLayout = [\n    [\n        { key: Keys.ONE },\n        { key: Keys.TWO },\n        { key: Keys.THREE },\n        { key: Keys.DEL, rowspan: 2, },\n    ], [\n        { key: Keys.FOUR },\n        { key: Keys.FIVE },\n        { key: Keys.SIX },\n    ], [\n        { key: Keys.SEVEN },\n        { key: Keys.EIGHT },\n        { key: Keys.NINE },\n        { key: Keys.ENTER, rowspan: 2, },\n    ], [\n        { key: Keys.DOT },\n        { key: Keys.ZERO },\n        { key: Keys.ESC },\n    ],\n];\n\nconst TelLayout = [\n    [\n        { key: Keys.ONE },\n        { key: Keys.TWO },\n        { key: Keys.THREE },\n    ], [\n        { key: Keys.FOUR },\n        { key: Keys.FIVE },\n        { key: Keys.SIX },\n    ], [\n        { key: Keys.SEVEN },\n        { key: Keys.EIGHT },\n        { key: Keys.NINE },\n    ], [\n        { key: Keys.DEL },\n        { key: Keys.ZERO },\n        { key: Keys.ENTER },\n    ],\n];\n\nconst PhoneLayout = [\n    [\n        { key: Keys.ONE },\n        { key: Keys.TWO },\n        { key: Keys.THREE },\n        { key: Keys.DEL, },\n    ], [\n        { key: Keys.FOUR },\n        { key: Keys.FIVE },\n        { key: Keys.SIX },\n        { key: Keys.ENTER, },\n    ], [\n        { key: Keys.SEVEN },\n        { key: Keys.EIGHT },\n        { key: Keys.NINE },\n        { key: Keys.DOT },\n    ], [\n        { key: Keys.BLANK },\n        { key: Keys.ZERO },\n        { key: Keys.BLANK },\n        { key: Keys.ESC },\n    ],\n];\n\nexport default {\n    number: NumberLayout,\n    tel: TelLayout,\n    phone: PhoneLayout,\n};\n","import { Component, EventEmitter, Input, Output, OnInit } from '@angular/core';\nimport { ENTER, DEL, ESC } from '../utils/keys';\nimport Layouts from '../utils/layouts';\n\nconst KeyboardOptions = {\n    layout: 'number',\n    entertext: 'Enter'\n};\n\n@Component({\n    selector: 'ng-numeric-keyboard',\n    templateUrl: './keyboard.component.html',\n    styleUrls: ['./keyboard.component.scss']\n})\nexport class NumericKeyboardComponent implements OnInit {\n\n    @Input() layout: string | { key: number | string }[][] = KeyboardOptions.layout;\n    @Input() entertext: string = KeyboardOptions.entertext;\n\n    @Output() press = new EventEmitter<number | string>();\n    @Output() enterpress = new EventEmitter();\n\n    public kp: any;\n    public ks: any;\n    public ENTER = ENTER;\n    public DEL = DEL;\n    public ESC = ESC;\n\n    ngOnInit() {\n        const options = { layout: this.layout, entertext: this.entertext };\n        this.init(options);\n    }\n\n    dispatch(event: string, payload?: number | string) {\n        switch (event) {\n            case 'press':\n                this.press.emit(payload);\n                break;\n            case 'enterpress':\n                this.enterpress.emit();\n                break;\n        }\n    }\n\n    onTouchend(key: any) {\n        this.dispatch('press', key);\n        if (key === ENTER) {\n            this.dispatch('enterpress');\n        }\n    }\n\n    private init(options: any) {\n        const { layout } = options;\n\n        let resolvedLayout;\n        if (typeof layout === 'string') {\n            resolvedLayout = Layouts[layout];\n            if (!Array.isArray(resolvedLayout)) {\n                throw new Error(`${layout} is not a build-in layout.`);\n            }\n        } else {\n            resolvedLayout = layout;\n            if (!Array.isArray(resolvedLayout) || !resolvedLayout.every(i => Array.isArray(i))) {\n                throw new Error(`custom layout must be a two-dimensional array.`);\n            }\n        }\n\n        this.kp = options;\n        this.ks = { resolvedLayout };\n    }\n}\n","import {\n    Component, EventEmitter, Input, Output, OnInit,\n    OnDestroy, AfterViewInit, AfterViewChecked, ElementRef, ApplicationRef,\n    ComponentFactoryResolver, Injector, EmbeddedViewRef, forwardRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nimport { NumericKeyboardComponent } from '../keyboard/keyboard.component';\n\nimport * as Keys from '../utils/keys';\nimport { coerceBooleanProperty, animate } from '../utils/utils';\n\nconst RNumber = /^\\d*(?:\\.\\d*)?$/;\nconst RTel = /^\\d*$/;\n\nconst KeyboardCenter = (() => {\n    let activeInput;\n\n    return {\n        register(input: any) {\n            this.unregister();\n            activeInput = input;\n            document.addEventListener('touchend', this.unregister, false);\n        },\n        unregister(e: any) {\n            if (!activeInput) {\n                return;\n            }\n            if (e && (activeInput.ks.inputElement.contains(e.target) || activeInput.ks.keyboardElement.contains(e.target))) {\n                return;\n            }\n            activeInput.closeKeyboard();\n            activeInput = null;\n            document.removeEventListener('touchend', this.unregister, false);\n        }\n    };\n})();\n\nconst Options = {\n    type: 'number',\n    value: '',\n    autofocus: false,\n    disabled: false,\n    readonly: false,\n    maxlength: 255,\n    name: '',\n    placeholder: '',\n    format: '^',\n    layout: 'number',\n    entertext: 'Enter'\n};\n\n@Component({\n    selector: 'ng-numeric-input',\n    templateUrl: './input.component.html',\n    styleUrls: ['./input.component.scss'],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NumericInputComponent),\n            multi: true\n        }\n    ]\n})\nexport class NumericInputComponent implements OnInit, OnDestroy, AfterViewInit, AfterViewChecked, ControlValueAccessor {\n\n    private _autofocus: boolean = Options.autofocus;\n    private _disabled: boolean = Options.disabled;\n    private _readonly: boolean = Options.readonly;\n    private _value: number | string = Options.value;\n\n    @Input() activeColor = '#3B3B3B';\n    public isFocus = false;\n\n    @Input()\n    get autofocus() { return this._autofocus; }\n    set autofocus(value: any) { this._autofocus = coerceBooleanProperty(value); }\n\n    @Input()\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    @Input()\n    get readonly() { return this._readonly; }\n    set readonly(value: any) { this._readonly = coerceBooleanProperty(value); }\n\n    @Input()\n    get ngModel() { return this._value; }\n    set ngModel(value: any) {\n        if (this.ks && this.ks.value !== value) {\n            const rawValue = value.toString().split('');\n            const cursorPos = rawValue.length;\n            this.set('rawValue', rawValue);\n            this.set('cursorPos', cursorPos);\n        }\n        this._value = value;\n    }\n\n    @Input() type: string = Options.type;\n    @Input() value: number | string = Options.value;\n    @Input() maxlength: number = Options.maxlength;\n    @Input() name: string = Options.name;\n    @Input() placeholder: string = Options.placeholder;\n    @Input() format: string | { (val: string): boolean } = Options.format;\n    @Input() layout: string | { key: number | string }[][] = Options.layout;\n    @Input() entertext: string = Options.entertext;\n\n    @Output() focus = new EventEmitter();\n    @Output() blur = new EventEmitter();\n    @Output() enterpress = new EventEmitter();\n    @Output() ngModelChange = new EventEmitter<number | string>();\n\n    public kp: any;\n    public ks: any;\n    _onChange = (_: any) => {};\n\n    constructor(\n        private element: ElementRef,\n        private appRef: ApplicationRef,\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private injector: Injector) {\n    }\n\n    ngOnInit() {\n        const resolvedOptions = {};\n        for (const key in Options) {\n            resolvedOptions[key] = this[key];\n        }\n        this.init(resolvedOptions);\n    }\n\n    ngOnDestroy() {\n        KeyboardCenter.unregister(null);\n    }\n\n    ngAfterViewInit() {\n        this.onMounted(this.element.nativeElement.querySelector('.numeric-input'));\n    }\n\n    ngAfterViewChecked() {\n        this.onUpdated();\n    }\n\n    trackByIndex(index) {\n        return index;\n    }\n\n    writeValue(value: any): void {\n        if (typeof value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: (_: any) => void): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {}\n\n    onFocus(e: any) {\n        e.stopPropagation();\n        this.openKeyboard();\n        const cursorPos = +e.target.dataset.index;\n        this.set('cursorPos', isNaN(cursorPos) ? this.ks.rawValue.length : cursorPos);\n    }\n\n    dispatch(event: string, payload?: number | string) {\n        switch (event) {\n            case 'focus':\n                this.focus.emit();\n                break;\n            case 'blur':\n                this.blur.emit();\n                break;\n            case 'enterpress':\n                this.enterpress.emit();\n                break;\n            case 'input':\n                this.ngModelChange.emit(payload);\n                break;\n        }\n    }\n\n    createKeyboard(el, options, events, callback) {\n        const componentRef = this.componentFactoryResolver\n            .resolveComponentFactory(NumericKeyboardComponent)\n            .create(this.injector);\n\n        Object.assign(componentRef.instance, options);\n\n        componentRef.instance.ngOnInit();\n\n        for (const event in events) {\n            componentRef.instance[event].subscribe(events[event]);\n        }\n\n        this.appRef.attachView(componentRef.hostView);\n        el.appendChild((componentRef.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement);\n\n        callback(componentRef);\n    }\n\n    destroyKeyboard(el, keyboard) {\n        keyboard.destroy();\n        this.appRef.detachView(keyboard.hostView);\n    }\n\n    private init(options) {\n        let formatFn = options.format;\n        if (typeof formatFn === 'string') {\n            formatFn = (rformat => (val => rformat.test(val)))(new RegExp(options.format));\n        }\n\n        const value = options.value;\n        const rawValue = value.toString().split('');\n        const cursorPos = rawValue.length;\n\n        this.kp = options;\n        this.ks = {\n            formatFn,\n            value,\n            rawValue,\n            cursorPos,\n            cursorColor: null,\n            cursorActive: false,\n            keyboard: null,\n            inputElement: null,\n            keyboardElement: null\n        };\n    }\n\n    private set(key, value) {\n        this.ks[key] = value;\n    }\n\n    onMounted(el) {\n        this.set('inputElement', el);\n        this.set('cursorColor', this.activeColor);\n\n        if (this.kp.autofocus && !this.kp.readonly && !this.kp.disabled) {\n            setTimeout(() => this.openKeyboard(), 500);\n        }\n    }\n\n    onUpdated() {\n        this.moveCursor();\n    }\n\n    input(key: any) {\n        const { type, maxlength } = this.kp;\n        const { rawValue, cursorPos, formatFn } = this.ks;\n\n        const input = (inputKey: any) => {\n            const isAdd = typeof inputKey !== 'undefined';\n            const newRawValue = rawValue.slice();\n            if (isAdd) {\n                newRawValue.splice(cursorPos, 0, inputKey);\n            } else {\n                newRawValue.splice(cursorPos - 1, 1);\n            }\n\n            let newValue = newRawValue.join('');\n\n            if (formatFn(newValue)) {\n                if (type === 'number') {\n                    if (!RNumber.test(newValue)) { return; }\n                    newValue = parseFloat(newValue);\n                    if (isNaN(newValue)) {\n                        newValue = '';\n                    }\n                } else if (newValue.length > maxlength || type === 'tel' && !RTel.test(newValue)) { return; }\n\n                this.set('value', newValue);\n                this.set('rawValue', newRawValue);\n                this.set('cursorPos', isAdd ? cursorPos + 1 : cursorPos - 1);\n                this.dispatch('input', newValue);\n            }\n        };\n\n        switch (key) {\n            case Keys.BLANK:\n                break;\n            case Keys.ESC:\n                this.closeKeyboard();\n                break;\n            case Keys.ENTER:\n                this.closeKeyboard();\n                this.dispatch('enterpress');\n                break;\n            case Keys.DEL:\n                if (cursorPos > 0) {\n                    input(undefined);\n                }\n                break;\n            case Keys.DOT   :\n            case Keys.ZERO  :\n            case Keys.ONE   :\n            case Keys.TWO   :\n            case Keys.THREE :\n            case Keys.FOUR  :\n            case Keys.FIVE  :\n            case Keys.SIX   :\n            case Keys.SEVEN :\n            case Keys.EIGHT :\n            case Keys.NINE  :\n            default:\n                input(key);\n                break;\n        }\n    }\n\n    moveCursor() {\n        if (!this.ks.cursorActive) {\n            return;\n        }\n\n        const elCursor = this.ks.inputElement.querySelector('.numeric-input-cursor');\n        const elText = this.ks.inputElement.querySelector('.numeric-input-text');\n        const elCharactor = elText.querySelector(`span:nth-child(${this.ks.cursorPos})`);\n\n        if (!elCharactor) {\n            elCursor.style.transform = 'translateX(0)';\n            elText.style.transform = 'translateX(0)';\n            return;\n        }\n\n        const cursorOffset = elCharactor.offsetLeft + elCharactor.offsetWidth;\n        const maxVisibleWidth = elText.parentNode.offsetWidth;\n        elCursor.style.transform = `translateX(${Math.min(maxVisibleWidth - 1, cursorOffset)}px)`;\n        elText.style.transform = `translateX(${Math.min(0, maxVisibleWidth - cursorOffset)}px)`;\n    }\n\n    openKeyboard() {\n        if (this.ks.keyboard) { return; }\n\n        const elContainer = document.createElement('div');\n        const elShadow = document.createElement('div');\n        const elKeyboard = document.createElement('div');\n        elContainer.className = 'numeric-keyboard-actionsheet';\n        elContainer.appendChild(elShadow);\n        elContainer.appendChild(elKeyboard);\n        document.body.appendChild(elContainer);\n\n        this.createKeyboard(\n            elKeyboard,\n            {\n                layout: this.kp.layout || this.kp.type,\n                entertext: this.kp.entertext\n            },\n            {\n                press: this.input.bind(this)\n            },\n            keyboard => this.set('keyboard', keyboard)\n        );\n\n        animate((timestamp, frame, frames) => {\n            elKeyboard.style.position = 'fixed';\n            elKeyboard.style.bottom = '0';\n            elKeyboard.style.left = '0';\n            elKeyboard.style.transform = `translateY(${(frames - frame) / frames * 100}%)`;\n        }, () => {}, 10);\n\n        this.set('keyboardElement', elKeyboard);\n        this.set('cursorActive', true);\n        this.set('cursorPos', this.ks.rawValue.length);\n\n        this.isFocus = true;\n        this.dispatch('focus');\n        KeyboardCenter.register(this);\n    }\n\n    closeKeyboard() {\n        if (!this.ks.keyboard) { return; }\n\n        const keyboard = this.ks.keyboard;\n        const elKeyboard = this.ks.keyboardElement;\n\n        animate((timestamp, frame, frames) => {\n            elKeyboard.style.transform = `translateY(${frame / frames * 100}%)`;\n        }, () => {\n            setTimeout(() => {\n                this.destroyKeyboard(elKeyboard, keyboard);\n                document.body.removeChild(elKeyboard.parentNode);\n            }, 50);\n        }, 10);\n\n        this.set('keyboard', null);\n        this.set('keyboardElement', null);\n        this.set('cursorActive', false);\n        this.set('cursorPos', 0);\n\n        this.isFocus = false;\n        this.dispatch('blur');\n        KeyboardCenter.unregister(null);\n    }\n}\n","const requestAnimationFrame: any = window.requestAnimationFrame || window.setTimeout;\n\nexport const animate = (iterable: any, done = () => {}, frames = 60) => {\n    let running = true;\n    let frame = 0;\n\n    const closure = (timestamp) => {\n        if (!running) {\n            return;\n        }\n        iterable(timestamp, ++frame, frames);\n        if (frame < frames) {\n            requestAnimationFrame(closure, 0);\n        } else {\n            done();\n        }\n    };\n\n    requestAnimationFrame(closure, 0);\n\n    return () => {\n        running = false;\n    };\n};\n\nexport const coerceBooleanProperty = (value: any) => {\n    return value != null && `${value}` !== 'false';\n};\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { NumericInputComponent } from './input/input.component';\nimport { NumericKeyboardComponent } from './keyboard/keyboard.component';\n\n@NgModule({\n    exports: [\n        NumericInputComponent,\n        NumericKeyboardComponent\n    ],\n    declarations: [\n        NumericInputComponent,\n        NumericKeyboardComponent\n    ],\n    entryComponents: [\n        NumericKeyboardComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule\n    ]\n})\nexport class NumericInputModule { }\n","import { NgModule } from '@angular/core';\nimport { NumericInputModule } from './numeric-input.module';\n\n@NgModule({\n    exports: [NumericInputModule]\n})\nexport class NgNumericKeyboardModule { }\n"]}